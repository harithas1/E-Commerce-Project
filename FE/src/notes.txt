1. User Routes
User Registration (POST)
Endpoint: POST https://e-commerce-project-l7gm.onrender.com/api/auth/register
Description: Registers a new user.
Request Body:

{
  "name": "John Doe",
  "email": "john@example.com",
  "password": "securePassword123",
  "role": "CUSTOMER"  // Role can be 'SELLER' or 'CUSTOMER'
}
Response (Success):

{
  "message": "Registration successful! Check your email for verification."
}
Response (Failure):

{
  "error": "Email already exists!"
}

------------------------------------------------------------------------------------------------------------


Verify Email (GET)
Endpoint: GET https://e-commerce-project-l7gm.onrender.com/api/auth/verify-email
Description: Verifies the user's email using a verification token.
Query Parameter: token=your_verification_token
Response (Success):

{
  "message": "Email verified successfully!"
}
Response (Failure):

{
  "error": "Invalid or expired token"
}

------------------------------------------------------------------------------------------------------------

Login User (POST)
Endpoint: POST https://e-commerce-project-l7gm.onrender.com/api/auth/login
Description: Authenticates the user and returns a JWT token.
Request Body:

{
  "email": "john@example.com",
  "password": "securePassword123"
}
Response (Success):

{
  "message": "Login successful",
  "token": "your_jwt_token_here"
}
Response (Failure):

{
  "error": "Invalid email or password"
}
------------------------------------------------------------------------------------------------------------

Create Review for Product (POST)
Endpoint: POST https://e-commerce-project-l7gm.onrender.com/api/reviews
Description: Allows users to create reviews for products.
Request Body:

{
  "userId": "user_id_here",
  "productId": "product_id_here",
  "rating": 5,
  "comment": "Great product!"
}
Response (Success):

{
  "message": "Review added successfully",
  "review": {
    "id": "review_id_here",
    "rating": 5,
    "comment": "Great product!",
    "date": "2025-02-25T00:00:00Z",
    "reviewerName": "John Doe",
    "reviewerEmail": "john@example.com"
  }
}
Response (Failure):

{
  "error": "Error adding review"
}

------------------------------------------------------------------------------------------------------------

Create Order (POST)
Endpoint: POST https://e-commerce-project-l7gm.onrender.com/api/orders
Description: Allows users to place an order for products.
Request Body:

{
  "userId": "user_id_here",
  "productId": "product_id_here",
  "quantity": 2
}
Response (Success):

{
  "message": "Order placed successfully",
  "order": {
    "id": "order_id_here",
    "status": "PENDING",
    "totalAmount": 49.99,
    "createdAt": "2025-02-25T00:00:00Z",
    "updatedAt": "2025-02-25T00:00:00Z"
  }
}
Response (Failure):

{
  "error": "Product not found"
}

------------------------------------------------------------------------------------------------------------

Get All Products (GET)
Endpoint: GET https://e-commerce-project-l7gm.onrender.com/api/products/list
Description: Retrieves a list of all products, with optional filters for search, category, etc.
Query Parameters:
limit (optional): Number of products per page (default 10)
skip (optional): Pagination offset (default 0)
search (optional): Search query for product name or description
categoryId (optional): Filter by category ID
Example URL: GET https://e-commerce-project-l7gm.onrender.com/api/products?limit=10&search=phone
Response (Success):

{
  "products": [
    {
      "id": "product_id_here",
      "title": "Smartphone",
      "description": "Latest model with 5G support",
      "price": 499.99,
      "rating": 4.5,
      "stock": 100,
      "categoryId": "category_id_here",
      "image": "product_image_url"
    }
  ],
  "total": 100
}
Response (Failure):

{
  "error": "No products found"
}

------------------------------------------------------------------------------------------------------------


2. Cart Routes
Add Product to Cart (POST)
Endpoint: POST https://e-commerce-project-l7gm.onrender.com/api/cart
Description: Adds a product to the user's cart.
Request Body:

{
  "userId": "user_id_here",
  "productId": "product_id_here",
  "quantity": 1
}
Response (Success):

{
  "message": "Product added to cart successfully"
}
Response (Failure):

{
  "error": "Product not found"
}

------------------------------------------------------------------------------------------------------------

Get Cart Items (GET)
Endpoint: GET https://e-commerce-project-l7gm.onrender.com/api/cart
Description: Retrieves all items in the user's cart.
Response (Success):

{
  "cartItems": [
    {
      "id": "cart_item_id_here",
      "productId": "product_id_here",
      "title": "Smartphone",
      "quantity": 2,
      "price": 499.99,
      "totalAmount": 999.98
    }
  ]
}
Response (Failure):

{
  "error": "No items in cart"
}

------------------------------------------------------------------------------------------------------------

Remove Item from Cart (DELETE)
Endpoint: DELETE https://e-commerce-project-l7gm.onrender.com/api/cart
Description: Removes a product from the user's cart.
Request Body:

{
  "userId": "user_id_here",
  "productId": "product_id_here"
}
Response (Success):

{
  "message": "Product removed from cart"
}
Response (Failure):

{
  "error": "Item not found in cart"
}


------------------------------------------------------------------------------------------------------------

3. Product Routes
Get Product Details (GET)
Endpoint: GET https://e-commerce-project-l7gm.onrender.com/api/products/{productId}
Description: Retrieves the details of a single product.
Response (Success):

{
  "id": "product_id_here",
  "title": "Smartphone",
  "description": "Latest model with 5G support",
  "price": 499.99,
  "rating": 4.5,
  "stock": 100,
  "image": "product_image_url",
  "category": {
    "id": "category_id_here",
    "name": "Electronics"
  }
}
Response (Failure):

{
  "error": "Product not found"
}



------------------------------------------------------------------------------------------------------------




4. Order Routes
Get All Orders (GET)
Endpoint: GET https://e-commerce-project-l7gm.onrender.com/api/orders
Description: Retrieves all orders for a user.
Response (Success):

{
  "orders": [
    {
      "id": "order_id_here",
      "status": "PENDING",
      "totalAmount": 499.99,
      "createdAt": "2025-02-25T00:00:00Z",
      "updatedAt": "2025-02-25T00:00:00Z"
    }
  ]
}
Response (Failure):

{
  "error": "No orders found"
}

------------------------------------------------------------------------------------------------------------

5. Payment Routes
Create Payment (POST)
Endpoint: POST https://e-commerce-project-l7gm.onrender.com/api/payment
Description: Creates a payment for an order.
Request Body:

{
  "orderId": "order_id_here",
  "userId": "user_id_here",
  "amount": 499.99,
  "paymentMethod": "Credit Card",
  "transactionId": "transaction_id_here"
}
Response (Success):

{
  "message": "Payment successful",
  "payment": {
    "id": "payment_id_here",
    "status": "COMPLETED",
    "amount": 499.99,
    "paymentMethod": "Credit Card",
    "transactionId": "transaction_id_here"
  }
}
Response (Failure):

{
  "error": "Payment failed"
}


------------------------------------------------------------------------------------------------------------



 Notes: Using /homepage-products API
Endpoint URL:
--->GET ---> https://e-commerce-project-l7gm.onrender.com/api/products/homepage-products?limit=5
This fetches best-selling and newest arrival products. The limit query parameter (optional) controls how many products to fetch.

Example Request:
--->GET https://e-commerce-project-l7gm.onrender.com/api/products/homepage-products?limit=3


Expected Response (JSON):

{
  "bestSellers": [
    {
      "id": "prod_001",
      "title": "Wireless Earbuds",
      "orders": 120,
      "category": { "name": "Electronics" }
    },
    {
      "id": "prod_002",
      "title": "Gaming Mouse",
      "orders": 90,
      "category": { "name": "Accessories" }
    }
  ],
  "newestArrivals": [
    {
      "id": "prod_010",
      "title": "Smartwatch Series X",
      "createdAt": "2024-02-20T09:15:00.000Z"
    },
    {
      "id": "prod_011",
      "title": "Noise-Canceling Headphones",
      "createdAt": "2024-02-18T14:30:00.000Z"
    }
  ]
}

What This Response Means:
"bestSellers" contains products with the highest number of orders.
"newestArrivals" contains products added most recently.

How to Integrate in Frontend:

javascript

axios.get("/api/products/homepage-products?limit=5")
  .then(response => console.log(response.data))
  .catch(error => console.error("Error fetching homepage products:", error));
Error Handling:
If something goes wrong, the response will be:


{
  "message": "Failed to fetch homepage products"
}



--------------------------------------------------------------------------------------------


✅ 
Endpoint: GET  https://e-commerce-project-l7gm.onrender.com/api/products/filter
Query Parameters:
categoryId (optional) → Filter by category
minPrice (optional) → Minimum price
maxPrice (optional) → Maximum price
Example Request:
http


GET /api/products/filter?categoryId=cat_123&minPrice=100&maxPrice=500
Expected Response (JSON)
json

[
  {
    "id": "prod_001",
    "title": "Wireless Headphones",
    "category": { "name": "Electronics" },
    "price": 250
  },
  {
    "id": "prod_002",
    "title": "Gaming Mouse",
    "category": { "name": "Accessories" },
    "price": 150
  }
]


------------------------------------------------------------------------------------------

✅ How It Works
Endpoint: GET  https://e-commerce-project-l7gm.onrender.com/api/products/filter
Query Parameters:
categoryId (optional) → Filter by category
minPrice (optional) → Minimum price
maxPrice (optional) → Maximum price
sortBy (optional, default: "price") → Sort by price, rating, or createdAt
order (optional, default: "asc") → "asc" for ascending, "desc" for descending
page (optional, default: 1) → Page number for pagination
pageSize (optional, default: 10) → Number of products per page


🔹 Example Requests
1️⃣ Search "Mouse" in Category
-->GET /api/products/filter?categoryId=cat_123&search=mouse


2️⃣ Get Products Sorted by Rating
-->GET /api/products/filter?sortBy=rating&order=desc

3️⃣ Get Paginated Results
-->GET /api/products/filter?page=2&pageSize=5











________________________________________________________________
psql postgresql://e_commerce_db_lmbk_user:fOeoAVgEXIYUgXrpjuFtF9FGZKQwS6tB@dpg-cusb4qqj1k6c73f37ngg-a.oregon-postgres.render.com:5432/e_commerce_db_lmbk  - terminal command
________________________________________________________________








INSERT INTO "Product" ("title", "description", "categoryId", "price", "stock", "image", "sellerId", "createdAt", "updatedAt") 
VALUES 
('The Alchemist', 'Bestselling novel by Paulo Coelho about following your dreams', 4, 259.99, 120, 'https://m.media-amazon.com/images/I/61HAE8zahLL._SL1331_.jpg', 1, now(), now());






INSERT INTO "Product" ("title", "description", "categoryId", "price", "stock", "image", "sellerId", "createdAt", "updatedAt") 
VALUES 
('Designer Handbag', 'Luxury handbag with premium leather finish', 2, 4999.99, 15, 'https://eske.in/cdn/shop/files/BA-364-L_Tan-VT_1_670x.png?v=1739617722', 1, now(), now());







│── src/
│   │── components/ui(shadcn components)          
│   │── pages/               
│   │   ├── Login.jsx
│   │   ├── Register.jsx
│   │   ├── Dashboard.jsx
│   │   ├── ProductList.jsx
│   │   ├── ProductDetail.jsx
│   │   ├── Cart.jsx
│   │   ├── Wishlist.jsx
│   │   ├── Checkout.jsx
│   │── App.jsx              
│   │── main.jsx             
│── .gitignore
│── tailwind.config.js       
│── vite.config.js           
│── package.json             
│── README.md  this is my folder structure